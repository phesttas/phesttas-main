version: '3.3'


services:

  api-gateway:
    container_name: kong
    links:
        - 'kong-database:kong-database'
    environment:
        - KONG_DATABASE=postgres
        - KONG_PG_HOST=kong-database
        - KONG_PG_PASSWORD=kong
        - KONG_CASSANDRA_CONTACT_POINTS=kong-database
        - KONG_PROXY_ACCESS_LOG=/dev/stdout
        - KONG_ADMIN_ACCESS_LOG=/dev/stdout
        - KONG_PROXY_ERROR_LOG=/dev/stderr
        - KONG_ADMIN_ERROR_LOG=/dev/stderr
        - 'KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl'
    ports:
        - '8000:8000'
        - '8443:8443'
        - '8001:8001'
        - '8444:8444'
    image: kong


  # message-bus:
  #     container_name: rabbitmq
  #     environment:
  #         - RABBITMQ_DEFAULT_USER=user
  #         - RABBITMQ_DEFAULT_PASS=password
  #     image: 'rabbitmq:3-management'
  #     ports:
  #         - '5672:5672'

  kong-database:
    container_name: kong-database
    ports:
        - '5432:5432'
    environment:
        - POSTGRES_USER=kong
        - POSTGRES_DB=kong
        - POSTGRES_PASSWORD=kong
    image: 'postgres:9.6'

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 #
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:9094,OUTSIDE://host.docker.internal:9094 #
      - KAFKA_LISTENERS=INTERNAL://:9092,OUTSIDE://:9094 #
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 #
      - KAFKA_BROKER_ID=1 #
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT #
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL #
    extra_hosts:
      - "host.docker.internal:172.17.0.1"

  kafka-topics-generator:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    command: >
      bash -c
      "sleep 5 &&
      kafka-topics --create --topic=verify-customer --if-not-exists --bootstrap-server=kafka:9094 --replication-factor=1 --partitions=1 &&
      kafka-topics --create --topic=create-customer --if-not-exists --bootstrap-server=kafka:9094 --replication-factor=1 --partitions=1 &&
      kafka-topics --create --topic=create-customer-confirmation --if-not-exists --bootstrap-server=kafka:9094 --replication-factor=1 --partitions=1 &&
      kafka-topics --create --topic=create-ticket --if-not-exists --bootstrap-server=kafka:9094 --replication-factor=1 --partitions=1 &&
      kafka-topics --create --topic=create-ticket-confirmation --if-not-exists --bootstrap-server=kafka:9094 --replication-factor=1 --partitions=1 &&
      kafka-topics --create --topic=send-notification --if-not-exists --bootstrap-server=kafka:9094 --replication-factor=1 --partitions=1 &&
      kafka-topics --create --topic=send-email --if-not-exists --bootstrap-server=kafka:9094 --replication-factor=1 --partitions=1 &&
      kafka-topics --create --topic=create-payment --if-not-exists --bootstrap-server=kafka:9094 --replication-factor=1 --partitions=1 &&
      kafka-topics --create --topic=payment-confirmation --if-not-exists --bootstrap-server=kafka:9094 --replication-factor=1 --partitions=1 "
    extra_hosts:
      - "host.docker.internal:172.17.0.1"
      
  control-center:
    image: confluentinc/cp-control-center:latest
    hostname: control-center
    depends_on:
      - kafka
    ports:
      - "9021:9021"
    environment:
      - CONTROL_CENTER_BOOTSTRAP_SERVERS=kafka:9092
      - CONTROL_CENTER_REPLICATION_FACTOR=1

  customers-db:
    image: postgres:9.6
    restart: always
    tty: true
    environment:
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: customers
    volumes:
      - customers-vol:/var/lib/postgresql/data
    ports:
      - "5435:5432"

  tickets-db:
    image: postgres:9.6
    restart: always
    tty: true
    environment:
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: tickets
    volumes:
      - tickets-vol:/var/lib/postgresql/data
    ports:
      - "5433:5432"

  payments-db:
    image: postgres:9.6
    restart: always
    tty: true
    environment:
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: payments
    volumes:
      - payments-vol:/var/lib/postgresql/data
    ports:
      - "5434:5432"

    # auth-db:
    #   image: postgres
    #   restart: always
    #   environment:
    #     POSTGRES_PASSWORD: example

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

volumes:
  customers-vol:
  payments-vol:
  auth-vol:
  tickets-vol:

    # customers-api:
    #   image: customers-api
    #   restart: always
    #   links:
    #     - customers-db
    #   ports:
    #     - 8080:8080
    
    # customers-service:
    #   image: customers-service
    #   restart: always
    #   links:
    #     - customers-db
    #   ports:
    #     - 8080:8080

    # tickets-api:
    #   image: tickets-api
    #   restart: always
    #   links:
    #     - tickets-db
    #   ports:
    #     - 8080:8080

    # tickets-service:
    #   image: tickets-service
    #   restart: always
    #   links:
    #     - tickets-db
    #   ports:
    #     - 8080:8080

    # payments-service:
    #   image: payments-service
    #   restart: always
    #   links:
    #     - payments-db
    #   ports:
    #     - 8080:8080

    # email-service:
    #   image: email-service
    #   restart: always
    #   links:
    #     - payments-db
    #   ports:
    #     - 8080:8080

    # notifications-service:
    #   image: notifications-service
    #   restart: always
    #   links:
    #     - payments-db
    #   ports:
    #     - 8080:8080

    # web-app:
    #   image: web-app
    #   restart: always
    #   links:
    #     - payments-db
    #   ports:
    #     - 8080:8080

    